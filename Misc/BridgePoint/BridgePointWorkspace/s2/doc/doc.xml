<?xml version='1.0' encoding='utf-8'?>
<!--
Notes -
  xsltproc docgen.xsl doc.xml > doc.html
-->
<!DOCTYPE article PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
  'C:/MentorGraphics/BridgePoint/tools/docgen/docbook/docbook-xml-4.5/docbookx.dtd' [
]>
<article>
<title>
  <trademark class='registered'>BridgePoint</trademark>
  xtUML Generated Documentation
</title>
<articleinfo>
  <author>
    <personname>
      <firstname></firstname><surname></surname>
    </personname>
  </author>
  <publisher>
  <publishername>company name</publishername>
  <address>
  <pob>8005 SW Boeckman Road</pob>
  <city>Wilsonville</city>, <state>OR</state>
  <postcode>97070</postcode> <country>USA</country>
  </address>
  </publisher>
</articleinfo>
<toc></toc>
<section>
<title>s2</title>
<subtitle>Generated Documentation</subtitle>
<para>Please find below generated documentation for the system named s2.</para>
<para></para>
<section>
<title>System-Level Data Type Packages</title>
<subtitle></subtitle>
<section>
<title>Datatypes</title>
<subtitle>Data Types Package</subtitle>
<para><figure id='DatatypesDataTypePackageDiagram-figure'>
<title id='DatatypesDataTypePackageDiagram-figure-title'>Datatypes Data Type Package Diagram</title>
<mediaobject><imageobject>
<imagedata fileref='images/s2-Datatypes-Data Type Package Diagram.png' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</figure>
</para>
<para><table frame='all'>
<title>Datatypes</title>
<tgroup cols='3' align='left' colsep='0' rowsep='0'>
<thead>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/UserDefinedDataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>timestamp</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/UserDefinedDataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>inst_ref&lt;Timer&gt;</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/UserDefinedDataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>date</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>component_ref</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>inst_ref&lt;Mapping&gt;</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>inst&lt;Mapping&gt;</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>inst&lt;Event&gt;</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>inst_ref_set&lt;Object&gt;</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>inst_ref&lt;Object&gt;</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>same_as&lt;Base_Attribute&gt;</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>state&lt;State_Model&gt;</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>unique_id</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>string</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>real</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>integer</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>boolean</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>void</para>
</entry>
<entry>
<para></para>
</entry>
</row>
</tbody>
</tgroup>
</table>
</para>
</section>
</section>
<section>
<title>Unformalized Domains</title>
<subtitle>Unformalized Domains</subtitle>
<para>This section renders the unformalized domains for the system.</para>
<section>
<title>sudoku Domain</title>
<subtitle></subtitle>
<para><figure id='s2-sudoku-DomainPackageDiagram-figure'>
<title id='s2-sudoku-DomainPackageDiagram-figure-title'>s2-sudoku-Domain Package Diagram</title>
<mediaobject><imageobject>
<imagedata fileref='images/s2-sudoku-Domain Package Diagram.png' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</figure>
</para>
<section>
<title>sudoku Domain-Level Data Type Packages</title>
<subtitle></subtitle>
<section>
<title>Datatypes</title>
<subtitle>Data Types Package</subtitle>
<para><figure id='DatatypesDataTypePackageDiagram-figure'>
<title id='DatatypesDataTypePackageDiagram-figure-title'>Datatypes Data Type Package Diagram</title>
<mediaobject><imageobject>
<imagedata fileref='images/s2-sudoku-Datatypes-Data Type Package Diagram.png' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</figure>
</para>
<para><table frame='all'>
<title>Datatypes</title>
<tgroup cols='3' align='left' colsep='0' rowsep='0'>
<thead>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/UserDefinedDataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>inst_ref&lt;Timer&gt;</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/UserDefinedDataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>timestamp</para>
</entry>
<entry>
<para> The system clock counts time in ticks. The size of a tick is dependent on the
 architecture and implementation.</para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/UserDefinedDataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>date</para>
</entry>
<entry>
<para>Time as known in the external world. For example, 12 October 1492,
13:25:10. The accuracy of external time is dependent on the architecture and
implementation.</para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>inst_ref&lt;Mapping&gt;</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>inst&lt;Mapping&gt;</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>inst&lt;Event&gt;</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>inst_ref_set&lt;Object&gt;</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>inst_ref&lt;Object&gt;</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>same_as&lt;Base_Attribute&gt;</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>state&lt;State_Model&gt;</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>unique_id</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>string</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>real</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>integer</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>boolean</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/DataType.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>void</para>
</entry>
<entry>
<para></para>
</entry>
</row>
</tbody>
</tgroup>
</table>
</para>
</section>
</section>
<section>
<title>functions Functions</title>
<subtitle>Function Package</subtitle>
<para><table frame='all'>
<title>sudoku functions</title>
<tgroup cols='3' align='left' colsep='0' rowsep='0'>
<thead>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Function.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Function.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>check()</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Function.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>solve_concurrently()</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Function.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>cort()</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Function.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>xit()</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Function.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>cleanup()</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Function.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>test()</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Function.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>setz4_spectrum()</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Function.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>setz3_given()</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Function.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>setz2_given()</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Function.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>solve()</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Function.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>display()</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Function.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>setz1_given()</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Function.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>setup()</para>
</entry>
<entry>
<para></para>
</entry>
</row>
</tbody>
</tgroup>
</table>
</para>
</section>
<section>
<title>sudoku Subsystems</title>
<subtitle></subtitle>
<para>Rendered here are the subsystem class diagrams.</para>
<section>
<title>sudoku sudoku</title>
<subtitle>Subsystem</subtitle>
<para><figure id='sudokusudokuClassDiagram-figure'>
<title id='sudokusudokuClassDiagram-figure-title'>sudoku sudoku Class Diagram</title>
<mediaobject><imageobject>
<imagedata fileref='images/s2-sudoku-sudoku-Class Diagram.png' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</figure>
</para>
<para><table frame='all'>
<title>sudoku sudoku</title>
<tgroup cols='3' align='left' colsep='0' rowsep='0'>
<thead>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Class.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Class.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>sequence</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Class.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>row</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Class.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>eligible digit</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Class.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>digit</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Class.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>column</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Class.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>cell</para>
</entry>
<entry>
<para></para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/Class.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>box</para>
</entry>
<entry>
<para></para>
</entry>
</row>
</tbody>
</tgroup>
</table>
</para>
<para><figure id='s2-sudoku-sudoku-sequence-InstanceStateMachine-figure'>
<title id='s2-sudoku-sudoku-sequence-InstanceStateMachine-figure-title'>s2-sudoku-sudoku-sequence-Instance State Machine</title>
<mediaobject><imageobject>
<imagedata fileref='images/s2-sudoku-sudoku-sequence-Instance State Machine.png' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</figure>
</para>
<para><figure id='s2-sudoku-sudoku-row-InstanceStateMachine-figure'>
<title id='s2-sudoku-sudoku-row-InstanceStateMachine-figure-title'>s2-sudoku-sudoku-row-Instance State Machine</title>
<mediaobject><imageobject>
<imagedata fileref='images/s2-sudoku-sudoku-row-Instance State Machine.png' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</figure>
</para>
<para><figure id='s2-sudoku-sudoku-column-InstanceStateMachine-figure'>
<title id='s2-sudoku-sudoku-column-InstanceStateMachine-figure-title'>s2-sudoku-sudoku-column-Instance State Machine</title>
<mediaobject><imageobject>
<imagedata fileref='images/s2-sudoku-sudoku-column-Instance State Machine.png' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</figure>
</para>
<para><figure id='s2-sudoku-sudoku-cell-InstanceStateMachine-figure'>
<title id='s2-sudoku-sudoku-cell-InstanceStateMachine-figure-title'>s2-sudoku-sudoku-cell-Instance State Machine</title>
<mediaobject><imageobject>
<imagedata fileref='images/s2-sudoku-sudoku-cell-Instance State Machine.png' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</figure>
</para>
<para><figure id='s2-sudoku-sudoku-box-InstanceStateMachine-figure'>
<title id='s2-sudoku-sudoku-box-InstanceStateMachine-figure-title'>s2-sudoku-sudoku-box-Instance State Machine</title>
<mediaobject><imageobject>
<imagedata fileref='images/s2-sudoku-sudoku-box-Instance State Machine.png' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</figure>
</para>
</section>
</section>
<section>
<title>External Entities EEs</title>
<subtitle>External Entity Package</subtitle>
<para><figure id='sudokuExternalEntitiesExternalEntityPackageDiagram-figure'>
<title id='sudokuExternalEntitiesExternalEntityPackageDiagram-figure-title'>sudoku External Entities External Entity Package Diagram</title>
<mediaobject><imageobject>
<imagedata fileref='images/s2-sudoku-External Entities-External Entity Package Diagram.png' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</figure>
</para>
<para><table frame='all'>
<title>sudoku External Entities</title>
<tgroup cols='4' align='left' colsep='0' rowsep='0'>
<thead>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/ExternalEntity.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
<entry>
<para>Bridges</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/ExternalEntity.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>Non-Volatile Storage</para>
</entry>
<entry>
<para></para>
</entry>
<entry>
<para>format, space_used, checksum, version</para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/ExternalEntity.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>Logging</para>
</entry>
<entry>
<para></para>
</entry>
<entry>
<para>LogSuccess, LogInfo, LogFailure</para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/ExternalEntity.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>Architecture</para>
</entry>
<entry>
<para></para>
</entry>
<entry>
<para>shutdown</para>
</entry>
</row>
<row>
<entry>
<para><mediaobject><imageobject>
<imagedata fileref='images/ExternalEntity.gif' scalefit='1' width='100%'/>
</imageobject></mediaobject>
</para>
</entry>
<entry>
<para>Time</para>
</entry>
<entry>
<para>The Time external entity provides date, timestamp, and timer related operations.</para>
</entry>
<entry>
<para>timer_cancel, timer_add_time, timer_reset_time, timer_remaining_time, timer_start_recurring, timer_start, current_clock, get_year, get_month, get_day, get_hour, get_minute, get_second, create_date, current_date</para>
</entry>
</row>
</tbody>
</tgroup>
</table>
</para>
</section>
</section>
</section>
<section>
<title>OAL Activity Listings</title>
<subtitle>Object Action Language</subtitle>
<para>Here are listings of all of the OAL activies in the model.</para>
<section>
<title>State Actions</title>
<subtitle></subtitle>
<section>
<title>box State[1]:solving</title>
<subtitle></subtitle>
<para></para>
<para></para>
<para><programlisting>if ( 100 == self.prune() )
  generate BOX2:solved() to self;
elif ( 100 == self.eliminate() )
  generate BOX2:solved() to self;
else
  select one sequence related by self-&gt;SEQUENCE[R1];
  if ( sequence.requests &gt;= 1 )
    sequence.requests = 1;
    b = self;
    generate BOX1:update() to b;
  else
    sequence.requests = 0;
  end if;
end if;

</programlisting></para>
</section>
<section>
<title>box State[2]:solved</title>
<subtitle></subtitle>
<para></para>
<para></para>
<para><programlisting>select one sequence related by self-&gt;SEQUENCE[R1];
sequence.solved = true;
</programlisting></para>
</section>
<section>
<title>cell State[1]:unsolved</title>
<subtitle></subtitle>
<para></para>
<para></para>
<para><programlisting>// It has been determined that the input digit cannot
// be used in this cell.

// Unlink the eliminated digit.
select any ineligible related by self-&gt;ELIGIBLE[R8]
  where ( selected.digit_value == rcvd_evt.digit );
if ( not_empty ineligible )
  select one digit related by ineligible-&gt;DIGIT[R8];
  unrelate self from digit across R8 using ineligible;
  // delete object instance ineligible;
  // Inform the row, col and box of the change. 
  // CDS:  Consider polymorphic event here.
  select one row related by self-&gt;ROW[R2];
  select one sequence related by row-&gt;SEQUENCE[R1];
  if ( not sequence.solved )
    sequence.requests = sequence.requests + 1;
    if ( sequence.requests &lt; 2 )
      generate ROW1:update() to row;
    end if;
  end if;
  select one column related by self-&gt;COLUMN[R3];
  select one sequence related by column-&gt;SEQUENCE[R1];
  if ( not sequence.solved )
    sequence.requests = sequence.requests + 1;
    if ( sequence.requests &lt; 2 )
      generate COLUMN1:update() to column;
    end if;
  end if;
  select one box related by self-&gt;BOX[R4];
  select one sequence related by box-&gt;SEQUENCE[R1];
  if ( not sequence.solved )
    sequence.requests = sequence.requests + 1;
    if ( sequence.requests &lt; 2 )
      generate BOX1:update() to box;
    end if;
  end if;
end if;

</programlisting></para>
</section>
<section>
<title>cell State[2]:solved</title>
<subtitle></subtitle>
<para></para>
<para></para>
<para><programlisting>// An answer has been found, so remove the eligible
// digits which are now ineligible digits.

// Link in the answer.
// CDS:  Consider selecting across R8 here.
select any digit from instances of DIGIT 
  where ( selected.value == rcvd_evt.digit );
if ( not_empty digit )
  relate self to digit across R9;
end if;

// Unlink the other digits.  There can be only one answer.
select many ineligibles related by self-&gt;ELIGIBLE[R8];
for each ineligible in ineligibles
  select one digit related by ineligible-&gt;DIGIT[R8];
  unrelate self from digit across R8 using ineligible;
  // delete object instance ineligible;
end for;

// CDS:  Inform the row, col and box that there is a change.
</programlisting></para>
</section>
<section>
<title>column State[1]:solving</title>
<subtitle></subtitle>
<para></para>
<para></para>
<para><programlisting>if ( 100 == self.prune() )
  generate COLUMN2:solved() to self;
elif ( 100 == self.eliminate() )
  generate COLUMN2:solved() to self;
else
  select one sequence related by self-&gt;SEQUENCE[R1];
  if ( sequence.requests &gt;= 1 )
    sequence.requests = 1;
    c = self;
    generate COLUMN1:update() to c;
  else
    sequence.requests = 0;
  end if;
end if;

</programlisting></para>
</section>
<section>
<title>column State[2]:solved</title>
<subtitle></subtitle>
<para></para>
<para></para>
<para><programlisting>select one sequence related by self-&gt;SEQUENCE[R1];
sequence.solved = true;
</programlisting></para>
</section>
<section>
<title>row State[1]:solving</title>
<subtitle></subtitle>
<para></para>
<para></para>
<para><programlisting>if ( 100 == self.prune() )
  generate ROW2:solved() to self;
elif ( 100 == self.eliminate() )
  generate ROW2:solved() to self;
else
  select one sequence related by self-&gt;SEQUENCE[R1];
  if ( sequence.requests &gt;= 1 )
    sequence.requests = 1;
    r = self;
    generate ROW1:update() to r;
  else
    sequence.requests = 0;
  end if;
end if;

</programlisting></para>
</section>
<section>
<title>row State[3]:solved</title>
<subtitle></subtitle>
<para></para>
<para></para>
<para><programlisting>select one sequence related by self-&gt;SEQUENCE[R1];
sequence.solved = true;
</programlisting></para>
</section>
</section>
<section>
<title>Class Operations</title>
<subtitle></subtitle>
<section>
<title>sudoku:sudoku:box:  prune</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>// Cut off eligible digits that match any answer digit for this sequence.

temperature = 0;
select many answerdigits related by self-&gt;CELL[R4]-&gt;DIGIT[R9];
select many eligibles related by self-&gt;CELL[R4]-&gt;ELIGIBLE[R8];
for each eligible in eligibles
  for each answerdigit in answerdigits
    if ( eligible.digit_value == answerdigit.value )
      select one opencell related by eligible-&gt;CELL[R8];
      // unrelate answerdigit from opencell across R8 using eligible;
      // delete object instance eligible;
      generate CELL1:eliminate( digit:answerdigit.value ) to opencell;
      temperature = 1;
      break;
    end if;
  end for;
end for;
  
select many opencells related by self-&gt;CELL[R4]
  where ( selected.answer_value == 0 );
if ( empty opencells )
  temperature = 100;
end if;
for each opencell in opencells
  // Notice if we have the answer now.
  select many eligibles related by opencell-&gt;ELIGIBLE[R8];
  c = cardinality eligibles;
  if ( 1 == c )
    select any answer related by opencell-&gt;ELIGIBLE[R8];
    // opencell.answer( answer_digit:answer.digit_value );
    generate CELL2:answer( digit:answer.digit_value ) to opencell;
    temperature = 1;
  end if;
end for;

return temperature;

</programlisting></para>
</section>
<section>
<title>sudoku:sudoku:box:  eliminate</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>// Solve by selecting eligible digits.
// Notice if any eligible digit appears only once.

temperature = 0;
select many eligibles related by self-&gt;CELL[R4]-&gt;ELIGIBLE[R8];
if ( empty eligibles )
  temperature = 100;
end if;
for each eligible in eligibles
  select many loners related by self-&gt;CELL[R4]-&gt;ELIGIBLE[R8]
    where ( selected.digit_value == eligible.digit_value );
  c = cardinality loners;
  if ( 1 == c )
    // This is an answer!
    select one cell related by eligible-&gt;CELL[R8];
    // cell.answer( answer_digit:eligible.digit_value );
    generate CELL2:answer( digit:eligible.digit_value ) to cell;
    temperature = 1;
    break;
  end if;
end for;
return temperature;
</programlisting></para>
</section>
<section>
<title>sudoku:sudoku:cell:  set_given</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>select any cell from instances of CELL
  where ( ( selected.row_number == param.row ) and 
          ( selected.column_number == param.column ) );
cell.answer( answer_digit:param.answer );
</programlisting></para>
</section>
<section>
<title>sudoku:sudoku:cell:  answer</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>// An answer has been found, so remove the eligible
// digits which are now ineligible digits.

// Link in the answer.
select any digit from instances of DIGIT 
  where ( selected.value == param.answer_digit );
if ( not_empty digit )
  relate self to digit across R9;
end if;

// Unlink the other digits.  There can be only one answer.
select many ineligibles related by self-&gt;ELIGIBLE[R8];
for each ineligible in ineligibles
  select one digit related by ineligible-&gt;DIGIT[R8];
  unrelate self from digit across R8 using ineligible;
  delete object instance ineligible;
end for;
</programlisting></para>
</section>
<section>
<title>sudoku:sudoku:cell:  score</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>select many cells from instances of CELL 
  where ( selected.answer_value != 0 );
score = cardinality cells;

//#inline
//   printf( &quot;Score is:  %d\n&quot;, v64_score );
// 


return score;
</programlisting></para>
</section>
<section>
<title>sudoku:sudoku:column:  prune</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>// Eliminate eligible digits that match any answer digit for this sequence.

temperature = 0;
select many answerdigits related by self-&gt;CELL[R3]-&gt;DIGIT[R9];
select many eligibles related by self-&gt;CELL[R3]-&gt;ELIGIBLE[R8];
for each eligible in eligibles
  for each answerdigit in answerdigits
    if ( eligible.digit_value == answerdigit.value )
      select one opencell related by eligible-&gt;CELL[R8];
      // unrelate answerdigit from opencell across R8 using eligible;
      // delete object instance eligible;
      generate CELL1:eliminate( digit:answerdigit.value ) to opencell;
      temperature = 1;
      break;
    end if;
  end for;
end for;
  
select many opencells related by self-&gt;CELL[R3]
  where ( selected.answer_value == 0 );
if ( empty opencells )
  temperature = 100;
end if;
for each opencell in opencells
  // Notice if we have the answer now.
  select many eligibles related by opencell-&gt;ELIGIBLE[R8];
  c = cardinality eligibles;
  if ( 1 == c )
    select any answer related by opencell-&gt;ELIGIBLE[R8];
    // opencell.answer( answer_digit:answer.digit_value );
    generate CELL2:answer( digit:answer.digit_value ) to opencell;
    temperature = 1;
  end if;
end for;

return temperature;

</programlisting></para>
</section>
<section>
<title>sudoku:sudoku:column:  eliminate</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>// Solve by select all eligible digits.  Notice if any eligible digit appears only once.

temperature = 0;
select many eligibles related by self-&gt;CELL[R3]-&gt;ELIGIBLE[R8];
if ( empty eligibles )
  temperature = 100;
end if;
for each eligible in eligibles
  select many loners related by self-&gt;CELL[R3]-&gt;ELIGIBLE[R8]
    where ( selected.digit_value == eligible.digit_value );
  c = cardinality loners;
  if ( 1 == c )
    // This is an answer!
    select one cell related by eligible-&gt;CELL[R8];
    // cell.answer( answer_digit:eligible.digit_value );
    generate CELL2:answer( digit:eligible.digit_value ) to cell;
    temperature = 1;
    break;
  end if;
end for;
return temperature;

</programlisting></para>
</section>
<section>
<title>sudoku:sudoku:row:  eliminate</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>// Solve by select all eligible digits.  Notice if any eligible digit appears only once.

temperature = 0;
select many eligibles related by self-&gt;CELL[R2]-&gt;ELIGIBLE[R8];
if ( empty eligibles )
  temperature = 100;
end if;
for each eligible in eligibles
  select many loners related by self-&gt;CELL[R2]-&gt;ELIGIBLE[R8]
    where ( selected.digit_value == eligible.digit_value );
  c = cardinality loners;
  if ( 1 == c )
    // This is an answer!
    select one cell related by eligible-&gt;CELL[R8];
    // cell.answer( answer_digit:eligible.digit_value );
    generate CELL2:answer( digit:eligible.digit_value ) to cell;
    temperature = 1;
    break;
  end if;
end for;
return temperature;

</programlisting></para>
</section>
<section>
<title>sudoku:sudoku:row:  prune</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>// Eliminate eligible digits that match any answer digit for this sequence.

temperature = 0;
select many answerdigits related by self-&gt;CELL[R2]-&gt;DIGIT[R9];
select many eligibles related by self-&gt;CELL[R2]-&gt;ELIGIBLE[R8];
for each eligible in eligibles
  for each answerdigit in answerdigits
    if ( eligible.digit_value == answerdigit.value )
      select one opencell related by eligible-&gt;CELL[R8];
      // unrelate answerdigit from opencell across R8 using eligible;
      // delete object instance eligible;
      generate CELL1:eliminate( digit:answerdigit.value ) to opencell;
      temperature = 1;
      break;
    end if;
  end for;
end for;
  
select many opencells related by self-&gt;CELL[R2]
  where ( selected.answer_value == 0 );
if ( empty opencells )
  temperature = 100;
end if;
for each opencell in opencells
  // Notice if we have the answer now.
  select many eligibles related by opencell-&gt;ELIGIBLE[R8];
  c = cardinality eligibles;
  if ( 1 == c )
    select any answer related by opencell-&gt;ELIGIBLE[R8];
    // opencell.answer( answer_digit:answer.digit_value );
    generate CELL2:answer( digit:answer.digit_value ) to opencell;
    temperature = 1;
  end if;
end for;

return temperature;

</programlisting></para>
</section>
<section>
<title>sudoku:sudoku:sequence:  solve</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>i = 0;
select many sequences from instances of SEQUENCE;
while ( 25 &gt; i )
  j = 0;
  while ( 25 &gt; j )
    ::display();
    
    select many eligibles from instances of ELIGIBLE;
    count1 = cardinality eligibles;
    count2 = 0;
    
    for each sequence in sequences
      k = sequence.solve_by_pruning();
    end for;
    
    select many eligibles from instances of ELIGIBLE;
    count2 = cardinality eligibles;
    
    if ( ( 81 == CELL::score() ) or ( count1 == count2 ) )
      break;
    end if;

    j = j + 1;
  end while;

  for each sequence in sequences
    k = sequence.solve_by_elimination();
  end for;
  
  if ( 81 == CELL::score() )
    break;
  end if;
  
  i = i + 1;
end while;

//#inline
// printf( &quot;passes:  %d\n&quot;, v66_i );
// 

</programlisting></para>
</section>
<section>
<title>sudoku:sudoku:sequence:  solve_by_elimination</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>temperature = 0;
select one row related by self-&gt;ROW[R1];
if ( not_empty row )
  temperature = row.eliminate();
else
  select one column related by self-&gt;COLUMN[R1];
  if ( not_empty column )
    temperature = column.eliminate();
  else
    select one box related by self-&gt;BOX[R1];
    if ( not_empty box )
      temperature = box.eliminate();
    else
      LOG::LogFailure( message:&quot;could not eliminate related sequence&quot; );
    end if;
  end if;
end if;
return temperature;


</programlisting></para>
</section>
<section>
<title>sudoku:sudoku:sequence:  solve_by_pruning</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>temperature = 0;
select one row related by self-&gt;ROW[R1];
if ( not_empty row )
  temperature = row.prune();
else
  select one column related by self-&gt;COLUMN[R1];
  if ( not_empty column )
    temperature = column.prune();
  else
    select one box related by self-&gt;BOX[R1];
    if ( not_empty box )
      temperature = box.prune();
    else
      LOG::LogFailure( message:&quot;could not prune related sequence&quot; );
    end if;
  end if;
end if;
return temperature;


</programlisting></para>
</section>
</section>
<section>
<title>Domain Functions</title>
<subtitle></subtitle>
<section>
<title>sudoku:  setup</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>// 
// Check to see if any instances are already here.
// This would mean that we have restored from NVS
// or that preexisting instances were defined in data.
//

select any sequence from instances of SEQUENCE;
if ( empty sequence )
  i = NVS::space_used();
  if ( i &lt; 100 )
    i = NVS::format();
    if( i != 0 )
      LOG::LogFailure( message:&quot;Error formatting the NVS.&quot; );
    end if;
  end if;

  LOG::LogInfo( message:&quot;Did not find any PEI data, initializing NVS&quot; );
  i = NVS::version( first:1, second:2 );
  i =  NVS::checksum( first:1, second:2 );
  
// Create 9 digits.
i = 9;
while ( 0 &lt; i )
  create object instance digit of DIGIT;
  digit.value = i;
  i = i - 1;
end while;


i = 9;
while ( 0 &lt; i )

  // Create the row sequence.
  create object instance sequence of SEQUENCE;
  sequence.solved = false;
  sequence.requests = 0;
  create object instance row of ROW;
  row.number = i;
  relate row to sequence across R1;
  
  // Create the column sequence.
  create object instance sequence of SEQUENCE;
  sequence.solved = false;
  sequence.requests = 0;
  create object instance column of COLUMN;
  column.number = i;
  relate column to sequence across R1;
  
  // Create the box sequence.
  create object instance sequence of SEQUENCE;
  sequence.solved = false;
  sequence.requests = 0;
  create object instance box of BOX;
  box.number = i;
  relate box to sequence across R1;
  
  i = i - 1;
end while;

select many rows from instances of ROW;
for each row in rows
  select many columns from instances of COLUMN;
  for each column in columns;
    create object instance cell of CELL;
    relate cell to row across R2;
    relate cell to column across R3;
  
    // Link in all 9 digits to each cell.
    select many digits from instances of DIGIT;
    for each digit in digits
      create object instance eligible of ELIGIBLE;
      relate digit to cell across R8 using eligible;
    end for;
  end for;
end for;

// Link the cells to the correct boxes.
select many cells from instances of CELL;
for each cell in cells
  if ( ( cell.row_number &lt;= 3 ) and
     ( cell.column_number &lt;= 3 ) )
    select any box from instances of BOX where ( selected.number == 1 );
    relate cell to box across R4;
  elif ( ( cell.row_number &lt;= 3 ) and
     ( ( 4 &lt;= cell.column_number ) and ( cell.column_number &lt;= 6 ) ) )
    select any box from instances of BOX where ( selected.number == 2 );
    relate cell to box across R4;
  elif ( ( cell.row_number &lt;= 3 ) and
     ( 7 &lt;= cell.column_number ) )
    select any box from instances of BOX where ( selected.number == 3 );
    relate cell to box across R4;
  elif ( ( ( 4 &lt;= cell.row_number ) and ( cell.row_number &lt;= 6 ) ) and
     ( cell.column_number &lt;= 3 ) )
    select any box from instances of BOX where ( selected.number == 4 );
    relate cell to box across R4;
  elif ( ( ( 4 &lt;= cell.row_number ) and ( cell.row_number &lt;= 6 ) ) and
     ( ( 4 &lt;= cell.column_number ) and ( cell.column_number &lt;= 6 ) ) )
    select any box from instances of BOX where ( selected.number == 5 );
    relate cell to box across R4;
  elif ( ( ( 4 &lt;= cell.row_number ) and ( cell.row_number &lt;= 6 ) ) and
     ( 7 &lt;= cell.column_number ) )
    select any box from instances of BOX where ( selected.number == 6 );
    relate cell to box across R4;
  elif ( ( 7 &lt;= cell.row_number ) and
     ( cell.column_number &lt;= 3 ) )
    select any box from instances of BOX where ( selected.number == 7 );
    relate cell to box across R4;
  elif ( ( 7 &lt;= cell.row_number ) and
     ( ( 4 &lt;= cell.column_number ) and ( cell.column_number &lt;= 6 ) ) )
    select any box from instances of BOX where ( selected.number == 8 );
    relate cell to box across R4;
  elif ( ( 7 &lt;= cell.row_number ) and
     ( 7 &lt;= cell.column_number ) )
    select any box from instances of BOX where ( selected.number == 9 );
    relate cell to box across R4;
  end if;
end for;

else
  LOG::LogInfo( message:&quot;PEI data found.&quot; );
end if;

</programlisting></para>
</section>
<section>
<title>sudoku:  setz1_given</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>

CELL::set_given( row:1, column:3, answer:9 );
CELL::set_given( row:1, column:4, answer:3 );
CELL::set_given( row:1, column:9, answer:5 );

CELL::set_given( row:2, column:4, answer:5 );
CELL::set_given( row:2, column:5, answer:1 );
CELL::set_given( row:2, column:6, answer:4 );
CELL::set_given( row:2, column:8, answer:7 );

CELL::set_given( row:3, column:1, answer:1 );
CELL::set_given( row:3, column:2, answer:5 );
CELL::set_given( row:3, column:3, answer:6 );
CELL::set_given( row:3, column:8, answer:8 );

CELL::set_given( row:4, column:1, answer:9 );
CELL::set_given( row:4, column:5, answer:8 );
CELL::set_given( row:4, column:9, answer:1 );

CELL::set_given( row:5, column:1, answer:7 );
CELL::set_given( row:5, column:4, answer:9 );
CELL::set_given( row:5, column:6, answer:5 );
CELL::set_given( row:5, column:9, answer:2 );

CELL::set_given( row:6, column:1, answer:5 );
CELL::set_given( row:6, column:5, answer:3 );
CELL::set_given( row:6, column:9, answer:9 );

CELL::set_given( row:7, column:2, answer:2 );
CELL::set_given( row:7, column:7, answer:4 );
CELL::set_given( row:7, column:8, answer:1 );
CELL::set_given( row:7, column:9, answer:7 );

CELL::set_given( row:8, column:2, answer:4 );
CELL::set_given( row:8, column:4, answer:1 );
CELL::set_given( row:8, column:5, answer:5 );
CELL::set_given( row:8, column:6, answer:6 );

CELL::set_given( row:9, column:1, answer:3 );
CELL::set_given( row:9, column:6, answer:7 );
CELL::set_given( row:9, column:7, answer:5 );


</programlisting></para>
</section>
<section>
<title>sudoku:  display</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>i = 1;
//#inline
//   printf( &quot;\n|---+---+---+---+---+---+---+---+---|\n&quot; );
// 

while ( i &lt;= 9 )
  j = 1;
  //#inline
//   printf( &quot;|&quot; );
//   

  while ( j &lt;= 9 )
    select any cell from instances of CELL
      where ( ( selected.row_number == i ) and ( selected.column_number == j ) );
    a = cell.answer_value;
    //#inline
//     if ( 0 == v59_a )
//       printf( &quot;   |&quot; );
//     else
//       printf( &quot; %d |&quot;, v59_a );
//     

    j = j + 1;
  end while;  
  //#inline
//   printf( &quot;\n|---+---+---+---+---+---+---+---+---|\n&quot; );
//   

  i = i + 1;
end while;
</programlisting></para>
</section>
<section>
<title>sudoku:  solve</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>score = CELL::score();
::display();

SEQUENCE::solve();

score = CELL::score();
if ( 81 == score )
  LOG::LogSuccess( message:&quot;solved the puzzle&quot; );
else
  LOG::LogFailure( message:&quot;failed to solved the puzzle&quot; );
end if;
::display();
</programlisting></para>
</section>
<section>
<title>sudoku:  setz2_given</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>
CELL::set_given( row:1, column:2, answer:6 );
CELL::set_given( row:1, column:4, answer:1 );
CELL::set_given( row:1, column:6, answer:4 );
CELL::set_given( row:1, column:8, answer:5 );

CELL::set_given( row:2, column:3, answer:8 );
CELL::set_given( row:2, column:4, answer:3 );
CELL::set_given( row:2, column:6, answer:5 );
CELL::set_given( row:2, column:7, answer:6 );

CELL::set_given( row:3, column:1, answer:2 );
CELL::set_given( row:3, column:9, answer:1 );

CELL::set_given( row:4, column:1, answer:8 );
CELL::set_given( row:4, column:4, answer:4 );
CELL::set_given( row:4, column:6, answer:7 );
CELL::set_given( row:4, column:9, answer:6 );

CELL::set_given( row:5, column:3, answer:6 );
CELL::set_given( row:5, column:7, answer:3 );

CELL::set_given( row:6, column:1, answer:7 );
CELL::set_given( row:6, column:4, answer:9 );
CELL::set_given( row:6, column:6, answer:1 );
CELL::set_given( row:6, column:9, answer:4 );

CELL::set_given( row:7, column:1, answer:5 );
CELL::set_given( row:7, column:9, answer:2 );

CELL::set_given( row:8, column:3, answer:7 );
CELL::set_given( row:8, column:4, answer:2 );
CELL::set_given( row:8, column:6, answer:6 );
CELL::set_given( row:8, column:7, answer:9 );

CELL::set_given( row:9, column:2, answer:4 );
CELL::set_given( row:9, column:4, answer:5 );
CELL::set_given( row:9, column:6, answer:8 );
CELL::set_given( row:9, column:8, answer:7 );

// This is extra.  Should not need this.
//CELL::set_given( row:8, column:1, answer:3 );

</programlisting></para>
</section>
<section>
<title>sudoku:  setz3_given</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>
CELL::set_given( row:1, column:2, answer:9 );
CELL::set_given( row:1, column:5, answer:6 );
CELL::set_given( row:1, column:6, answer:5 );

CELL::set_given( row:2, column:4, answer:3 );
CELL::set_given( row:2, column:7, answer:4 );
CELL::set_given( row:2, column:8, answer:9 );

CELL::set_given( row:3, column:2, answer:8 );
CELL::set_given( row:3, column:3, answer:3 );
CELL::set_given( row:3, column:7, answer:2 );

CELL::set_given( row:4, column:1, answer:3 );
CELL::set_given( row:4, column:4, answer:8 );
CELL::set_given( row:4, column:6, answer:4 );
CELL::set_given( row:4, column:9, answer:6 );

CELL::set_given( row:5, column:1, answer:1 );
CELL::set_given( row:5, column:9, answer:7 );

CELL::set_given( row:6, column:1, answer:5 );
CELL::set_given( row:6, column:4, answer:2 );
CELL::set_given( row:6, column:6, answer:3 );
CELL::set_given( row:6, column:9, answer:9 );

CELL::set_given( row:7, column:3, answer:4 );
CELL::set_given( row:7, column:7, answer:6 );
CELL::set_given( row:7, column:8, answer:1 );

CELL::set_given( row:8, column:2, answer:2 );
CELL::set_given( row:8, column:3, answer:7 );
CELL::set_given( row:8, column:6, answer:6 );

CELL::set_given( row:9, column:4, answer:9 );
CELL::set_given( row:9, column:5, answer:3 );
CELL::set_given( row:9, column:8, answer:8 );
</programlisting></para>
</section>
<section>
<title>sudoku:  setz4_spectrum</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>
CELL::set_given( row:1, column:5, answer:8 );
CELL::set_given( row:1, column:6, answer:3 );
CELL::set_given( row:1, column:7, answer:4 );

CELL::set_given( row:2, column:1, answer:3 );
CELL::set_given( row:2, column:6, answer:4 );
CELL::set_given( row:2, column:7, answer:8 );
CELL::set_given( row:2, column:8, answer:2 );
CELL::set_given( row:2, column:9, answer:1 );

CELL::set_given( row:3, column:1, answer:3 );

CELL::set_given( row:4, column:3, answer:9 );
CELL::set_given( row:4, column:4, answer:4 );
CELL::set_given( row:4, column:6, answer:1 );
CELL::set_given( row:4, column:8, answer:8 );
CELL::set_given( row:4, column:9, answer:3 );


CELL::set_given( row:6, column:1, answer:4 );
CELL::set_given( row:6, column:2, answer:6 );
CELL::set_given( row:6, column:4, answer:5 );
CELL::set_given( row:6, column:6, answer:7 );
CELL::set_given( row:6, column:7, answer:1 );

CELL::set_given( row:7, column:7, answer:2 );
CELL::set_given( row:7, column:9, answer:7 );

CELL::set_given( row:8, column:1, answer:1 );
CELL::set_given( row:8, column:2, answer:2 );
CELL::set_given( row:8, column:3, answer:5 );
CELL::set_given( row:8, column:4, answer:3 );
CELL::set_given( row:8, column:9, answer:9 );

CELL::set_given( row:9, column:3, answer:7 );
CELL::set_given( row:9, column:4, answer:2 );
CELL::set_given( row:9, column:5, answer:4 );
</programlisting></para>
</section>
<section>
<title>sudoku:  test</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>// Run the puzzles we know about.
::setz1_given();
::solve();
::cleanup();

//
// ::setup();
// ::setz2_given();
// ::solve();
// ::cleanup();
// 
// ::setup();
// ::setz4_spectrum();
// ::solve();
// ::cleanup();
// 


</programlisting></para>
</section>
<section>
<title>sudoku:  cleanup</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>
// Clean up any and all eligible digits.
select many eligibles from instances of ELIGIBLE;
for each eligible in eligibles
  select one cell related by eligible-&gt;CELL[R8];
  select one digit related by eligible-&gt;DIGIT[R8];
  unrelate cell from digit across R8 using eligible;
  delete object instance eligible;
end for;

// Unrelate the answers.
select many cells from instances of CELL;
for each cell in cells
  select one digit related by cell-&gt;DIGIT[R9];
  if ( not_empty digit )
    unrelate cell from digit across R9;
  end if;
end for;

// Delete the digits.
select many digits from instances of DIGIT;
for each digit in digits
  delete object instance digit;
end for;

// Unrelate/delete the cells from the rows, columns and boxes.
// Unrelate/delete the sequences.
// Delete the cells while unrelating the boxes.
select many rows from instances of ROW;
for each row in rows
  select many cells related by row-&gt;CELL[R2];
  for each cell in cells
    unrelate row from cell across R2;
  end for;
  select one sequence related by row-&gt;SEQUENCE[R1];
  delete object instance sequence;
  delete object instance row;
end for;  
select many columns from instances of COLUMN;
for each column in columns
  select many cells related by column-&gt;CELL[R3];
  for each cell in cells
    unrelate column from cell across R3;
  end for;
  select one sequence related by column-&gt;SEQUENCE[R1];
  delete object instance sequence;
  delete object instance column;
end for;  
select many boxes from instances of BOX;
for each box in boxes
  select many cells related by box-&gt;CELL[R4];
  for each cell in cells
    unrelate box from cell across R4;
    delete object instance cell;
  end for;
  select one sequence related by box-&gt;SEQUENCE[R1];
  delete object instance sequence;
  delete object instance box;
end for;  

</programlisting></para>
</section>
<section>
<title>sudoku:  xit</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>::cleanup();
ARCH::shutdown();
</programlisting></para>
</section>
<section>
<title>sudoku:  solve_concurrently</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>score = CELL::score();
::display();

select any row from instances of ROW;
generate ROW1:update() to row;
</programlisting></para>
</section>
<section>
<title>sudoku:  check</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>score = CELL::score();
if ( 81 == score )
  LOG::LogSuccess( message:&quot;solved the puzzle&quot; );
else
  LOG::LogFailure( message:&quot;failed to solved the puzzle&quot; );
end if;
::display();
</programlisting></para>
</section>
</section>
<section>
<title>EE Bridge Operations</title>
<subtitle></subtitle>
<section>
<title>sudoku:Non-Volatile Storage:  version</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>return 0;
</programlisting></para>
</section>
<section>
<title>sudoku:Non-Volatile Storage:  checksum</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>return 0;
</programlisting></para>
</section>
<section>
<title>sudoku:Non-Volatile Storage:  space_used</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>return 0;
</programlisting></para>
</section>
<section>
<title>sudoku:Non-Volatile Storage:  format</title>
<subtitle></subtitle>
<para></para>
<para><programlisting>return 0;
</programlisting></para>
</section>
</section>
</section>
</section>
</article>
